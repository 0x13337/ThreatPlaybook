{
  "data":
  {
    "repoByName":
    {
      "cwe": 89,
      "name": "SQL Injection",
      "description": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
      "relatedCwes": [],
      "mitigations": ["{\"description\": \"Consider using ORMs (Object to Relation Mappers) to protect against SQL Injection. Nearly all of them perform Parameterized Queries and Query Encoding.\", \"phase\": \"Architecture and Design\", \"strategy\": \"Libraries or Frameworks\"}", "{\"description\": \"Process SQL queries using prepared statements, parameterized queries. Do not dynamically construct and execute query strings within these features using \\\"exec\\\" or similar functionality, since this may re-introduce the possibility of SQL injection.\", \"phase\": \"Implementation\"}", "{\"description\": \"Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account.\", \"phase\": \"Architecture and Design\"}", "{\"description\": \"In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.\", \"phase\": \"Implementation\"}", "{\"description\": \"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed,as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\", \"phase\": \"Operation\"}"],
      "categories": ["app_vulns", "owasp"],
      "tests": [
      {
        "name": "automated-vulnerability-scanning",
        "tools": ["zap", "burpsuite", "arachni", "acunetix", "netsparker", "appspider", "w3af"],
        "type": "discovery",
        "testCase": "run automated vulnerability discovery tools and its Injection payloads against the application",
        "tags": []
      },
      {
        "name": "manual",
        "tools": [],
        "type": "manual",
        "testCase": "test for SQL Injection variants manually with pentesters, bug-bounty",
        "tags": []
      },
      {
        "name": "exploit",
        "tools": ["sqlmap", "netsparker", "jsqli"],
        "type": "exploit",
        "testCase": "Run exploit tools to identify and exploit SQL Injections in the application",
        "tags": []
      },
      {
        "name": "source-composition-scanning",
        "tools": ["retirejs", "npm-audit", "owasp-dependency-checker", "blackduck", "whitesource", "snyk", "safety"],
        "type": "sca",
        "testCase": "Run Source Composition Scanners against the libraries being used by the application, to identify instances of SQL Injection",
        "tags": []
      },
      {
        "name": "static-analysis",
        "tools": ["checkmarx", "brakeman", "bandit", "pyt", "security-code-scan", "veracode", "nodejsscan", "coverity"],
        "type": "sast",
        "testCase": "Run Static Analysis tools to identify instances of dynamic queries or stored procedures that are vulnerable to SQL Injection",
        "tags": []
      }]
    }
  }
}
