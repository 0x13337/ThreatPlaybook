import axios from "axios";
const loginUrl = process.env.VUE_APP_API_URL;

export const state = () => ({
  isLoading: false,
  data: [],
  sevData: [],
  projectVuls: [],
  projectVulSevs: [],
  projectVulData: []
});
export const mutations = {
  IS_PAGE_LOADING(state, data) {
    state.isLoading = data;
  },
  FETCH_DATA(state, data) {
    state.data = data;
  },
  FETCH_SEV_DATA(state, data) {
    state.sevData = data;
  },
  FETCH_VULS_PROJECT(state, data) {
    state.projectVuls = data;
  },
  FETCH_VULS_SEV_PROJECT(state, data) {
    state.projectVulSevs = data;
  }
};
export const actions = {
  showPageLoading({ commit }, data) {
    commit("IS_PAGE_LOADING", data);
  },
  fetchVulnerabilitySevData({ commit }) {
    axios
      .get(loginUrl + "/vulnerability/severity", {
        headers: {
          Authorization: localStorage.getItem("token")
        }
      })
      .then(response => {
        if (response.data.success) {
          const pieChart = [];
          const highCount = [];
          const mediumCount = [];
          const lowCount = [];
          for (const data of response.data.data) {
            if (data.severity === 3) {
              highCount.push(data.severity);
            } else if (data.severity === 2) {
              mediumCount.push(data.severity);
            } else {
              lowCount.push(data.severity);
            }
          }
          pieChart.push(highCount.length);
          pieChart.push(mediumCount.length);
          pieChart.push(lowCount.length);
          commit("FETCH_SEV_DATA", pieChart);
          commit("IS_PAGE_LOADING", false);
        }
        commit("PAGE_LOADING", false);
      })
      .catch(error => {
        if (error.response.status === 401) {
          commit("PAGE_LOADING", false);
          //   commit("ERROR_MESSAGE", "Invalid credentials");
          //   commit("ERROR_MESSAGE_STATUS", true);
        }
      });
  },

  fetchVulnerabilitybyProject({ commit }, payload) {
    axios
      .post(loginUrl + "/vulnerability/project", payload, {
        headers: {
          Authorization: localStorage.getItem("token")
        }
      })
      .then(response => {
        if (response.data.success) {
          const vulData = [];
          const pieSeries = [];
          const highPieCount = [];
          const mediumPieCount = [];
          const lowPieCount = [];
          for (const vul of response.data.data) {
            vulData.push({
              name: vul.name,
              cwe: vul.cwe,
              severity: vul.severity,
              description: vul.description
            });
            if (vul.severity === 3) {
              highPieCount.push(vul.severity);
            } else if (vul.severity === 2) {
              mediumPieCount.push(vul.severity);
            } else {
              lowPieCount.push(vul.severity);
            }
          }
          pieSeries.push(highPieCount.length);
          pieSeries.push(mediumPieCount.length);
          pieSeries.push(lowPieCount.length);
          commit("FETCH_VULS_PROJECT", vulData);
          commit("FETCH_VULS_SEV_PROJECT", pieSeries);
          commit("IS_PAGE_LOADING", false);
        }
        commit("PAGE_LOADING", false);
      })
      .catch(error => {
        if (error.response.status === 401) {
          commit("PAGE_LOADING", false);
          //   commit("ERROR_MESSAGE", "Invalid credentials");
          //   commit("ERROR_MESSAGE_STATUS", true);
        }
      });
  }
};
export const getters = {
  isPageLoading(state) {
    return state.isLoading;
  },
  getVulnerabilitySevData(state) {
    if (state.sevData) {
      return state.sevData;
    }
  },
  getVulnerabilityProjectCount(state) {
    if (state.projectVuls) {
      return state.projectVuls.length;
    }
  },
  getVulnerabilityProjectSev(state) {
    if (state.projectVulSevs) {
      return state.projectVulSevs;
    }
  },
  getVulnerabilityProjectData(state) {
    if (state.projectVuls) {
      return state.projectVuls;
    }
  }
};
